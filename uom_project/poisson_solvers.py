# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_poisson_solvers.ipynb.

# %% auto 0
__all__ = ['poisson_gauss_seidel_solver']

# %% ../nbs/01_poisson_solvers.ipynb 5
import numpy as np

# %% ../nbs/01_poisson_solvers.ipynb 9
def poisson_gauss_seidel_solver(
        w, h, nx, ny, r,
        verbose=True, log_middle_values=False,
):
    psi = np.zeros((nx, ny)) # streamfunction

    middle_values = []

    for iteration in range(1, 4 * nx + 1):
        for i in range(1, nx - 1):
            for j in range(1, ny - 1):
                psi[i, j] = (1 - r) * psi[i, j] + r * (
                    psi[i - 1, j] + psi[i + 1, j] +
                    psi[i, j - 1] + psi[i, j + 1] +
                    w[i, j] * h ** 2
                ) / 4
        
        if verbose:
            print(f"{iteration=}; psi(0.5, 0.5) = {psi[nx // 2, ny // 2]}")
        
        if log_middle_values:
            middle_values.append(psi[nx // 2, ny // 2])
    
    return psi, iteration, middle_values
